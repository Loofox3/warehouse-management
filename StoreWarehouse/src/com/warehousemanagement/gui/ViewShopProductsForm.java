package gui;

import service.DataManager;
import model.Product;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

public class ViewShopProductsForm extends JFrame {
    private DataManager dataManager;
    
    private JTable productsTable;
    private JComboBox<String> comboSort;
    private JTextField txtSearch;
    private JButton btnSearch;
    private JButton btnClear;
    private JButton btnClose;
    private JLabel lblStats;
    
    public ViewShopProductsForm(DataManager dataManager) {
        this.dataManager = dataManager;
        initializeComponents();
        setupLayout();
        setupListeners();
        loadProductsData();
    }
    
    private void initializeComponents() {
        setTitle("–¢–æ–≤–∞—Ä—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ - –ü—Ä–æ—Å–º–æ—Ç—Ä");
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setSize(800, 500);
        setLocationRelativeTo(null);
        
        // –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤
        String[] columnNames = {"ID", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–¶–µ–Ω–∞", "–í –Ω–∞–ª–∏—á–∏–∏", "–ù–∞ —Å–∫–ª–∞–¥–µ", "–°—Ç–∞—Ç—É—Å"};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        productsTable = new JTable(model);
        
        // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ–∏—Å–∫–∞ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        String[] sortOptions = {"–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–ê-–Ø)", "–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–Ø-–ê)", "–ü–æ —Ü–µ–Ω–µ (–≤–æ–∑—Ä.)", "–ü–æ —Ü–µ–Ω–µ (—É–±—ã–≤.)", "–ü–æ –Ω–∞–ª–∏—á–∏—é (—É–±—ã–≤.)"};
        comboSort = new JComboBox<>(sortOptions);
        txtSearch = new JTextField(15);
        btnSearch = new JButton("–ù–∞–π—Ç–∏");
        btnClear = new JButton("–°–±—Ä–æ—Å–∏—Ç—å");
        btnClose = new JButton("–ó–∞–∫—Ä—ã—Ç—å");
        
        lblStats = new JLabel();
        lblStats.setFont(new Font("Arial", Font.BOLD, 12));
    }
    
    private void setupLayout() {
        setLayout(new BorderLayout());
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        JLabel lblTitle = new JLabel("–¢–æ–≤–∞—Ä—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ", JLabel.CENTER);
        lblTitle.setFont(new Font("Arial", Font.BOLD, 16));
        lblTitle.setBorder(BorderFactory.createEmptyBorder(10, 0, 10, 0));
        add(lblTitle, BorderLayout.NORTH);
        
        // –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        JPanel controlPanel = new JPanel(new FlowLayout());
        controlPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        
        controlPanel.add(new JLabel("–ü–æ–∏—Å–∫:"));
        controlPanel.add(txtSearch);
        controlPanel.add(btnSearch);
        controlPanel.add(new JLabel("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:"));
        controlPanel.add(comboSort);
        controlPanel.add(btnClear);
        
        add(controlPanel, BorderLayout.NORTH);
        
        // –¢–∞–±–ª–∏—Ü–∞
        JScrollPane scrollPane = new JScrollPane(productsTable);
        add(scrollPane, BorderLayout.CENTER);
        
        // –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –∫–Ω–æ–ø–æ–∫
        JPanel bottomPanel = new JPanel(new BorderLayout());
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        JPanel statsPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        statsPanel.setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10));
        statsPanel.add(lblStats);
        bottomPanel.add(statsPanel, BorderLayout.NORTH);
        
        // –ö–Ω–æ–ø–∫–∏
        JPanel buttonPanel = new JPanel();
        buttonPanel.add(btnClose);
        bottomPanel.add(buttonPanel, BorderLayout.SOUTH);
        
        add(bottomPanel, BorderLayout.SOUTH);
    }
    
    private void setupListeners() {
        btnSearch.addActionListener(e -> searchProducts());
        btnClear.addActionListener(e -> clearSearch());
        btnClose.addActionListener(e -> dispose());
        comboSort.addActionListener(e -> loadProductsData());
        
        // –ü–æ–∏—Å–∫ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Enter
        txtSearch.addActionListener(e -> searchProducts());
    }
    
    private void loadProductsData() {
        loadProductsData(null);
    }
    
    private void loadProductsData(String searchTerm) {
        DefaultTableModel model = (DefaultTableModel) productsTable.getModel();
        model.setRowCount(0);
        
        List<Product> products = dataManager.getProducts().values().stream()
                .filter(product -> product.getQuantityInShop() > 0) // –¢–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ
                .collect(Collectors.toList());
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–∏—Å–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (searchTerm != null && !searchTerm.trim().isEmpty()) {
            String searchLower = searchTerm.toLowerCase();
            products = products.stream()
                    .filter(product -> product.getName().toLowerCase().contains(searchLower))
                    .collect(Collectors.toList());
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        String sortOption = (String) comboSort.getSelectedItem();
        if (sortOption != null) {
            switch (sortOption) {
                case "–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–ê-–Ø)":
                    products.sort(Comparator.comparing(Product::getName));
                    break;
                case "–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–Ø-–ê)":
                    products.sort(Comparator.comparing(Product::getName).reversed());
                    break;
                case "–ü–æ —Ü–µ–Ω–µ (–≤–æ–∑—Ä.)":
                    products.sort(Comparator.comparing(Product::getPrice));
                    break;
                case "–ü–æ —Ü–µ–Ω–µ (—É–±—ã–≤.)":
                    products.sort(Comparator.comparing(Product::getPrice).reversed());
                    break;
                case "–ü–æ –Ω–∞–ª–∏—á–∏—é (—É–±—ã–≤.)":
                    products.sort(Comparator.comparing(Product::getQuantityInShop).reversed());
                    break;
            }
        }
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        int totalProducts = 0;
        int totalQuantity = 0;
        double totalValue = 0;
        
        for (Product product : products) {
            String status = getStockStatus(product);
            String statusColor = getStatusColor(product);
            
            Object[] rowData = {
                product.getId(),
                product.getName(),
                String.format("%.2f —Ä—É–±.", product.getPrice()),
                product.getQuantityInShop(),
                product.getQuantityInWarehouse(),
                status
            };
            model.addRow(rowData);
            
            totalProducts++;
            totalQuantity += product.getQuantityInShop();
            totalValue += product.getPrice() * product.getQuantityInShop();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        updateStats(totalProducts, totalQuantity, totalValue);
    }
    
    private String getStockStatus(Product product) {
        int shopQty = product.getQuantityInShop();
        
        if (shopQty >= 10) {
            return "‚úÖ –ú–Ω–æ–≥–æ";
        } else if (shopQty >= 5) {
            return "‚ö†Ô∏è –°—Ä–µ–¥–Ω–µ";
        } else if (shopQty >= 1) {
            return "üî¥ –ú–∞–ª–æ";
        } else {
            return "‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏";
        }
    }
    
    private String getStatusColor(Product product) {
        int shopQty = product.getQuantityInShop();
        
        if (shopQty >= 10) {
            return "green";
        } else if (shopQty >= 5) {
            return "orange";
        } else {
            return "red";
        }
    }
    
    private void updateStats(int totalProducts, int totalQuantity, double totalValue) {
        lblStats.setText(String.format(
            "–¢–æ–≤–∞—Ä–æ–≤: %d | –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: %d —à—Ç. | –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: %.2f —Ä—É–±.",
            totalProducts, totalQuantity, totalValue
        ));
        
        // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –µ—Å–ª–∏ –º–∞–ª–æ —Ç–æ–≤–∞—Ä–æ–≤
        if (totalProducts == 0) {
            lblStats.setForeground(Color.RED);
            lblStats.setText(lblStats.getText() + " - –ù–ï–¢ –¢–û–í–ê–†–û–í –í –ú–ê–ì–ê–ó–ò–ù–ï!");
        } else if (totalProducts < 5) {
            lblStats.setForeground(Color.ORANGE);
        } else {
            lblStats.setForeground(Color.BLACK);
        }
    }
    
    private void searchProducts() {
        String searchTerm = txtSearch.getText().trim();
        loadProductsData(searchTerm);
    }
    
    private void clearSearch() {
        txtSearch.setText("");
        loadProductsData();
    }
}